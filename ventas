<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Reporte Diario de Caja ‚Äî Cuadr√≠cula Editable</title>
  <meta name="description" content="Aplicaci√≥n para registrar operaciones de caja directamente en una cuadr√≠cula. Guardado local y env√≠o a la nube." />

  <style>
    :root{
      --primary:#0056b3; --success:#28a745; --danger:#dc3545;
      --warning:#ffc107; --info:#007bff; --muted:#6c757d;
      --purple:#6f42c1;
      --bg:#f4f7f9; --card:#fff; --radius:8px; --shadow:0 6px 18px rgba(9,30,66,0.08);
      --whatsapp:#25D366; --border:#e6eaee;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;font-family:Inter,system-ui,-apple-system,"Segoe UI",Roboto,Helvetica,Arial;background:var(--bg);color:#222;line-height:1.45;padding:12px;}
    .container{max-width:1200px;margin:0 auto;background:var(--card);border-radius:var(--radius);box-shadow:var(--shadow);padding:18px; position: relative;}
    header h1{margin:0 0 8px 0;color:var(--primary);font-size:1.6rem}
    header p{margin:0 0 14px 0;color:var(--muted);font-size:0.95rem}
    #session-info{display:flex;gap:12px;align-items:center;justify-content:space-between;padding:8px 10px;border-radius:6px;background:#eef3fb;margin-bottom:14px;font-size:0.95rem;}
    .actions-bar {display:flex;gap:10px;flex-wrap:wrap;margin-bottom:16px;}
    .btn {padding:10px 14px;border-radius:6px;border:0;cursor:pointer;color:#fff;font-weight:600;display:inline-flex;align-items:center;gap:8px;transition:transform .12s, box-shadow .12s, opacity .12s;justify-content:center;}
    .btn:active{transform:translateY(1px)} .btn:disabled{opacity:.6;cursor:not-allowed}
    .btn-primary{background:var(--primary)} .btn-success{background:var(--success)}
    .btn-info{background:var(--info)} .btn-warning{background:var(--warning); color:#222}
    .btn-danger{background:var(--danger)} .btn-whatsapp{background:var(--whatsapp)}
    .btn-purple{background:var(--purple)}
    .btn-small{padding: 4px 8px; font-size: 0.8rem;}
    .form-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(220px,1fr));gap:10px;margin-bottom:12px;}
    label{font-weight:600;font-size:0.88rem;margin-bottom:4px;display:block}
    input, select{width:100%;padding:8px 10px;border:1px solid var(--border);border-radius:6px;font-size:0.95rem;background:#fff;}
    
    .table-input {
      border: 1px solid #dde2e7; background-color: #fdfdfd; width: 100%; padding: 4px;
      border-radius: 4px; font-size: inherit; box-shadow: inset 0 1px 2px rgba(0,0,0,0.05);
    }
    .table-input:focus {
      background-color: #fff; border-color: var(--primary); outline: none; box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }
    
    hr{border:0;border-top:1px solid #eef2f5;margin:16px 0}
    .records-container{overflow:auto;border-radius:6px;border:1px solid var(--border)}
    table{width:100%;border-collapse:collapse;min-width:900px}
    th, td{padding:8px;border-top:1px solid #f4f7fb;font-size:0.95rem; text-align: left; vertical-align: middle;}
    
    .truncate {
      white-space: normal;
      word-break: break-word;
    }
    
    thead th{background:#f1f6fb;font-weight:700;position:sticky;top:0;z-index:2;border-bottom:1px solid var(--border)}
    tbody tr:nth-child(odd){background:#fbfdff}
    tbody tr:hover { background-color: #e7f1ff !important; }

    .row-style-efectivo { background-color: #e9f7ec; }
    .row-style-electronica { background-color: #f8f9fa; }
    .row-style-credito-nomina { background-color: #e6eef9; }
    .row-style-credito-formulas { background-color: #e0f2ff; }
    .row-style-gasto { background-color: #fff8e7; }
    .row-style-interco { background-color: #f3e5f5; }
    
    tbody tr.row-style-efectivo:nth-child(odd) { background-color: #dff2e3; }
    tbody tr.row-style-electronica:nth-child(odd) { background-color: #f0f1f2; }
    tbody tr.row-style-credito-nomina:nth-child(odd) { background-color: #dce5f0; }
    tbody tr.row-style-credito-formulas:nth-child(odd) { background-color: #d5e9f5; }
    tbody tr.row-style-gasto:nth-child(odd) { background-color: #fcf3d7; }
    tbody tr.row-style-interco:nth-child(odd) { background-color: #e1bee7; }

    tfoot td { padding: 10px; background: #fafcfe; font-weight: 700; border-top: 1px solid #eef2f5; }
    tfoot tr.grand-total td { background-color: #e7f1ff; font-weight: bold; }
    tfoot tr.sub-grand-total td { background-color: #e9ecef; font-weight: bold; }

    .col-number, .col-total {text-align:right} .col-action{text-align:center;white-space:nowrap}
    .hidden{display:none !important}
    .status-pill{display:inline-flex;gap:8px;align-items:center;padding:6px 10px;border-radius:999px;font-weight:700;font-size:0.9rem}
    .status-online{background:#e6f7ee;color:var(--success)}
    .status-offline{background:#fff0f0;color:var(--danger)}
    .actions-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:10px;margin-top:6px;}
  </style>
</head>
<body>
  <main class="container" id="app">
    <header>
      <h1>Reporte de Caja (Cuadr√≠cula)</h1>
      <p>Diligencie los valores directamente en las casillas del siguiente cuadro.</p>
    </header>

    <section id="session-info-container">
        <div id="session-setup-fields" class="form-grid">
            <div><label for="fecha">Fecha del reporte</label><input id="fecha" type="date" required /></div>
            <div>
                <label for="puntoVenta">Punto de venta</label>
                <select id="puntoVenta" required></select>
            </div>
            <div style="align-self: end;"><button id="start-session-btn" class="btn btn-success" style="width: 100%;">Iniciar / Cambiar Sesi√≥n</button></div>
        </div>
        <div id="session-info" class="hidden">
            <div><strong>Fecha:</strong> <span id="session-date-display"></span> ‚Äî <strong>Punto:</strong> <span id="session-pos-display"></span></div>
            <div style="display:flex;gap:8px;align-items:center">
                <div id="network-status" class="status-pill status-offline">Offline</div>
            </div>
        </div>
    </section>

    <hr/>

    <section id="main-content" class="hidden">
        <div class="actions-bar">
            <button id="add-nomina-btn" class="btn btn-primary">A√±adir Venta a Cr√©dito (N√≥mina)</button>
            <button id="add-formulas-btn" class="btn btn-info">A√±adir Venta a Cr√©dito (F√≥rmulas)</button>
            <button id="add-interco-btn" class="btn btn-purple">A√±adir Ventas a cr√©dito a empresas del grupo</button>
            <button id="add-gasto-btn" class="btn btn-warning">A√±adir Gasto en Efectivo</button>
        </div>

        <div class="records-container">
            <table id="recordsTable">
                <thead>
                    <tr>
                        <th style="width: 32%;">Tipo de Operaci√≥n</th>
                        <th class="col-number" style="width: 12%;">Valor</th>
                        <th class="col-number" style="width: 12%;">Devoluciones</th>
                        <th class="col-number" style="width: 13%;">Total</th>
                        <th style="width: 15%;">Tercero / Destino</th>
                        <th style="width: 11%;">Detalle</th>
                        <th class="col-action" style="width: 5%;">Acci√≥n</th>
                    </tr>
                </thead>
                <tbody id="recordsListBody"></tbody>
                <tfoot id="recordsTableFooter">
                    <tr data-summary-id="total_ventas_efectivo"><td>Total ventas en efectivo</td><td colspan="2"></td><td class="col-total"></td><td colspan="3"></td></tr>
                    <tr data-summary-id="total_ventas_electronicas"><td>Total ventas por medios electronicos</td><td colspan="2"></td><td class="col-total"></td><td colspan="3"></td></tr>
                    <tr data-summary-id="total_ventas_credito"><td>Total ventas a credito</td><td colspan="2"></td><td class="col-total"></td><td colspan="3"></td></tr>
                    <tr class="sub-grand-total" data-summary-id="total_ventas_global"><td>Total ventas</td><td colspan="2"></td><td class="col-total"></td><td colspan="3"></td></tr>
                    <tr data-summary-id="total_gastos_efectivo"><td>Total gastos en efectivo</td><td colspan="2"></td><td class="col-total"></td><td colspan="3"></td></tr>
                    <tr class="grand-total" data-summary-id="total_esperado_tesoreria"><td>Total dinero a recibir por tesoreria</td><td colspan="2"></td><td class="col-total"></td><td colspan="3"></td></tr>
                </tfoot>
            </table>
        </div>

        <div id="action-buttons-container" class="actions-grid" style="margin-top:12px">
            <button id="sendAllBtn" class="btn btn-primary">üì§ Guardar Todo en la Nube</button>
            <button id="sendWhatsAppBtn" class="btn btn-whatsapp">‚úîÔ∏è Enviar Resumen por WhatsApp</button>
            <button id="clearAllBtn" class="btn btn-danger">üóëÔ∏è Limpiar y Finalizar Reporte</button>
        </div>
    </section>

  </main>

  <script>
  (function(){
    'use strict';

    const CONFIG = {
      LS_RECORDS_KEY: 'salesGridRecords_v2',
      LS_SESSION_KEY: 'sessionGrid_v2',
      WHATSAPP_PHONE: '573114040809',
      SCRIPT_URL: 'https://script.google.com/macros/s/AKfycbx-_O7ZMuWAZKZppxFa0_cOd4yTI5wiqJuMVjIqRoJEucqjFbL4Jlri57OoYXNIFykouA/exec',
      PUNTOS_VENTA: ['Almendros', 'Aroma', 'Ferrocarril', 'Flora', 'Irotama', 'Libertador', 'Minca', 'Neguanje', 'Orient', 'Playa', 'Reserva', 'Rodadero'],
      EMPRESAS_GRUPO: ['Unidad Hemato O.', 'Sembrando Esperanza', 'Inversiones ARCADIA', 'Doctor Ahorro', 'Heritage', 'Distribuidora'],
    };

    const Utils = {
      safeNumber(val){ 
        const cleanStr = String(val || '0').replace(/\./g, '').replace(/,/g, '.');
        const n = parseFloat(cleanStr); 
        return isFinite(n) ? n : 0; 
      },
      formatCurrency(num){ return new Intl.NumberFormat('es-CO',{ style:'currency', currency:'COP', minimumFractionDigits:0, maximumFractionDigits:0 }).format(Math.round(num)); },
      nowDateISO(){ return new Date().toISOString().slice(0,10); },
      uuidv4(){ return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => { const r = Math.random()*16|0, v = c==='x' ? r : (r&0x3|0x8); return v.toString(16); }); },
    };

    const UI = {
        mainContent: document.getElementById('main-content'),
        sessionSetup: document.getElementById('session-setup-fields'),
        sessionInfo: document.getElementById('session-info'),
        sessionDate: document.getElementById('session-date-display'),
        sessionPos: document.getElementById('session-pos-display'),
        networkStatus: document.getElementById('network-status'),
        recordsBody: document.getElementById('recordsListBody'),
        recordsFooter: document.getElementById('recordsTableFooter'),
        fechaInput: document.getElementById('fecha'),
        puntoVentaInput: document.getElementById('puntoVenta'),
    };
    
    const state = {
        session: { date: null, pos: null },
    };

    const App = {
      init() {
        this.populatePuntoVentaSelect();
        this.loadSession();
        this.bindEvents();
        this.updateNetworkStatus();
        window.addEventListener('online', () => this.updateNetworkStatus());
        window.addEventListener('offline', () => this.updateNetworkStatus());

        if (state.session.date && state.session.pos) {
            this.startSession(state.session.date, state.session.pos, true);
        } else {
            UI.fechaInput.value = Utils.nowDateISO();
        }
      },

      populatePuntoVentaSelect() {
        const select = UI.puntoVentaInput;
        select.innerHTML = '<option value="">Seleccione...</option>';
        CONFIG.PUNTOS_VENTA.forEach(pv => {
            select.innerHTML += `<option value="${pv}">${pv}</option>`;
        });
      },

      bindEvents() {
        document.getElementById('start-session-btn').addEventListener('click', () => {
            const fecha = UI.fechaInput.value;
            const puntoVenta = UI.puntoVentaInput.value;
            if (!fecha || !puntoVenta) {
                alert('Por favor, seleccione fecha y punto de venta.');
                return;
            }
            if (localStorage.getItem(this.getStorageKey()) && !confirm('¬øIniciar nueva sesi√≥n? Se borrar√°n los datos no guardados de la sesi√≥n anterior.')) {
                return;
            }
            this.startSession(fecha, puntoVenta);
        });
        
        document.getElementById('add-nomina-btn').addEventListener('click', () => this.addRow({ tipo: 'Ventas a cr√©dito (descuentos por n√≥mina)', category: 'credito', isRemovable: true, styleHint: 'credito-nomina' }));
        document.getElementById('add-formulas-btn').addEventListener('click', () => this.addRow({ tipo: 'Ventas a cr√©dito (f√≥rmulas)', category: 'credito', isRemovable: true, styleHint: 'credito-formulas' }));
        document.getElementById('add-gasto-btn').addEventListener('click', () => this.addRow({ tipo: 'Gasto en efectivo', category: 'gasto', isRemovable: true, styleHint: 'gasto' }));
        document.getElementById('add-interco-btn').addEventListener('click', () => this.addRow({ tipo: 'Ventas a cr√©dito a empresas del grupo', category: 'credito', isRemovable: true, styleHint: 'interco' }));
        
        UI.recordsBody.addEventListener('input', (e) => this.handleTableInput(e));
        UI.recordsBody.addEventListener('click', (e) => this.handleTableClick(e));
        UI.recordsBody.addEventListener('blur', (e) => this.handleTableBlur(e), true);

        document.getElementById('sendAllBtn').addEventListener('click', () => this.handleSendAll());
        document.getElementById('sendWhatsAppBtn').addEventListener('click', () => this.handleSendWhatsApp());
        document.getElementById('clearAllBtn').addEventListener('click', () => this.handleClearAll());
      },

      startSession(date, pos, fromStorage = false) {
        state.session.date = date;
        state.session.pos = pos;
        this.saveSession();

        UI.sessionDate.textContent = date;
        UI.sessionPos.textContent = pos;
        UI.sessionSetup.classList.add('hidden');
        UI.sessionInfo.classList.remove('hidden');
        UI.mainContent.classList.remove('hidden');

        if (!fromStorage) {
            localStorage.removeItem(this.getStorageKey());
            this.createInitialRows();
        } else {
            this.loadRecords();
        }
        this.updateTotalsDisplay();
      },

      createInitialRows() {
          UI.recordsBody.innerHTML = '';
          const initialData = [
              { tipo: 'Efectivo POS del comprobante diario', category: 'efectivo', styleHint: 'efectivo' },
              { tipo: 'Ventas con QR', category: 'electronica', styleHint: 'electronica' },
              { tipo: 'Ventas con tarjeta debito', category: 'electronica', styleHint: 'electronica' },
              { tipo: 'Ventas con tarjeta credito', category: 'electronica', styleHint: 'electronica' },
          ];
          initialData.forEach(data => this.addRow(data, true));
          this.saveRecords();
      },

      addRow(data = {}, skipSave = false) {
          const defaults = { id: Utils.uuidv4(), tipo: '', valor: 0, devoluciones: 0, tercero: '', detalle: '', isRemovable: false, category: 'default', styleHint: 'electronica' };
          const record = { ...defaults, ...data };
          
          const tr = document.createElement('tr');
          tr.dataset.id = record.id;
          tr.dataset.category = record.category;
          tr.dataset.styleHint = record.styleHint;
          tr.classList.add(`row-style-${record.styleHint}`);

          const total = Utils.safeNumber(record.valor) - Utils.safeNumber(record.devoluciones);

          let terceroCellHtml = `<input type="text" class="table-input" data-field="tercero" value="${record.tercero || ''}">`;
          if (record.tipo === 'Ventas a cr√©dito a empresas del grupo') {
              const optionsHtml = CONFIG.EMPRESAS_GRUPO
                  .map(empresa => `<option value="${empresa}" ${record.tercero === empresa ? 'selected' : ''}>${empresa}</option>`)
                  .join('');
              terceroCellHtml = `<select class="table-input" data-field="tercero"><option value="">Seleccione empresa...</option>${optionsHtml}</select>`;
          }

          tr.innerHTML = `
              <td class="truncate" title="${record.tipo}">${record.tipo}</td>
              <td class="col-number"><input type="text" inputmode="decimal" class="table-input" data-field="valor" value="${record.valor || ''}" placeholder="0"></td>
              <td class="col-number"><input type="text" inputmode="decimal" class="table-input" data-field="devoluciones" value="${record.devoluciones || ''}" placeholder="0"></td>
              <td class="col-total" data-field="total">${Utils.formatCurrency(total)}</td>
              <td>${terceroCellHtml}</td>
              <td><input type="text" class="table-input" data-field="detalle" value="${record.detalle || ''}"></td>
              <td class="col-action">${record.isRemovable ? '<button class="btn btn-danger btn-small" data-action="delete">Borrar</button>' : ''}</td>
          `;
          UI.recordsBody.appendChild(tr);

          const firstInput = tr.querySelector('[data-field="valor"]');
          if (firstInput) {
              firstInput.focus();
          }

          if (!skipSave) {
              this.saveRecords();
              this.updateTotalsDisplay();
          }
          return tr;
      },

      handleTableInput(e) {
          if (e.target.classList.contains('table-input')) {
              this.updateTotalsDisplay();
              this.saveRecords();
          }
      },
      
      handleTableBlur(e) {
          if (e.target.classList.contains('table-input') && e.target.inputMode === 'decimal') {
              const value = Utils.safeNumber(e.target.value);
              e.target.value = value !== 0 ? new Intl.NumberFormat('es-CO').format(value) : '';
          }
      },

      handleTableClick(e) {
        const deleteBtn = e.target.closest('[data-action="delete"]');
        if (deleteBtn) {
            const row = deleteBtn.closest('tr');
            if (row) {
                row.remove();
                this.updateTotalsDisplay();
                this.saveRecords();
            }
        }
      },
      
      getCalculatedState() {
          const totals = { efectivo: 0, electronica: 0, credito: 0, gasto: 0 };
          
          UI.recordsBody.querySelectorAll('tr[data-id]').forEach(tr => {
              const valor = Utils.safeNumber(tr.querySelector('[data-field="valor"]').value);
              const devoluciones = Utils.safeNumber(tr.querySelector('[data-field="devoluciones"]').value);
              const currentTotal = valor - devoluciones;
              
              tr.querySelector('[data-field="total"]').textContent = Utils.formatCurrency(currentTotal);
              
              const category = tr.dataset.category;
              if (totals.hasOwnProperty(category)) {
                  totals[category] += currentTotal;
              }
          });

          const totalVentasNetoEfectivo = totals.efectivo;
          const totalDineroTesoreria = totalVentasNetoEfectivo - totals.gasto;
          const totalVentasGeneral = totalVentasNetoEfectivo + totals.electronica + totals.credito;

          return {
              summary: {
                  ventasNetoEfectivo: totalVentasNetoEfectivo,
                  ventasElectronicas: totals.electronica,
                  ventasCredito: totals.credito,
                  gastosEfectivo: totals.gasto,
                  ventasGlobal: totalVentasGeneral,
                  esperadoTesoreria: totalDineroTesoreria,
              }
          };
      },

      updateTotalsDisplay() {
          const state = this.getCalculatedState();
          const summary = state.summary;
          UI.recordsFooter.querySelector('[data-summary-id="total_ventas_efectivo"] .col-total').textContent = Utils.formatCurrency(summary.ventasNetoEfectivo);
          UI.recordsFooter.querySelector('[data-summary-id="total_ventas_electronicas"] .col-total').textContent = Utils.formatCurrency(summary.ventasElectronicas);
          UI.recordsFooter.querySelector('[data-summary-id="total_ventas_credito"] .col-total').textContent = Utils.formatCurrency(summary.ventasCredito);
          UI.recordsFooter.querySelector('[data-summary-id="total_gastos_efectivo"] .col-total').textContent = Utils.formatCurrency(summary.gastosEfectivo);
          UI.recordsFooter.querySelector('[data-summary-id="total_ventas_global"] .col-total').textContent = Utils.formatCurrency(summary.ventasGlobal);
          UI.recordsFooter.querySelector('[data-summary-id="total_esperado_tesoreria"] .col-total').textContent = Utils.formatCurrency(summary.esperadoTesoreria);
      },

      getRecordsFromTable() {
          const records = [];
          UI.recordsBody.querySelectorAll('tr[data-id]').forEach(tr => {
              const valor = Utils.safeNumber(tr.querySelector('[data-field="valor"]').value);
              const devoluciones = Utils.safeNumber(tr.querySelector('[data-field="devoluciones"]').value);

              if (valor !== 0 || devoluciones !== 0) {
                  records.push({
                      id: tr.dataset.id,
                      tipo: tr.cells[0].title,
                      total: valor - devoluciones,
                      tercero: tr.querySelector('[data-field="tercero"]').value,
                      detalle: tr.querySelector('[data-field="detalle"]').value,
                      category: tr.dataset.category,
                  });
              }
          });
          return records;
      },
      
      async handleSendAll() {
          const records = this.getRecordsFromTable();
          if (records.length === 0) {
              alert('No hay registros con valores para guardar.');
              return;
          }

          const btn = document.getElementById('sendAllBtn');
          btn.disabled = true;
          btn.textContent = 'Guardando...';

          const detailData = records.map(r => ({
              fecha: state.session.date,
              puntoVenta: state.session.pos,
              tipo: r.tipo,
              tercero: r.tercero,
              detalle: r.detalle,
              valor: r.total,
          }));
          
          const calculated = this.getCalculatedState().summary;
          const summaryData = [
              { tipo: 'Total ventas en efectivo', valor: calculated.ventasNetoEfectivo },
              { tipo: 'Total ventas por medios electronicos', valor: calculated.ventasElectronicas },
              { tipo: 'Total ventas a credito', valor: calculated.ventasCredito },
              { tipo: 'Total ventas', valor: calculated.ventasGlobal },
              { tipo: 'Total gastos en efectivo', valor: calculated.gastosEfectivo },
              { tipo: 'Total dinero a recibir por tesoreria', valor: calculated.esperadoTesoreria },
          ].map(item => ({
              fecha: state.session.date,
              puntoVenta: state.session.pos,
              tipo: item.tipo,
              tercero: '', // Modificado para que est√© en blanco
              detalle: '', // Modificado para que est√© en blanco
              valor: item.valor,
          }));

          const dataToSend = [...detailData, ...summaryData];

          try {
              const response = await fetch(CONFIG.SCRIPT_URL, {
                  method: 'POST',
                  body: JSON.stringify(dataToSend),
                  headers: { 'Content-Type': 'text/plain;charset=utf-8' },
              });
              const result = await response.json();
              if (result.result !== 'success') throw new Error(result.error || 'Error del servidor.');
              
              alert('¬°Registros guardados con √©xito!');
              btn.textContent = '‚úîÔ∏è Guardado';
          } catch (error) {
              console.error("Error al enviar datos:", error);
              alert('Error: No se pudieron guardar los registros.');
              btn.disabled = false;
              btn.textContent = 'üì§ Guardar Todo en la Nube';
          }
      },
      
      handleSendWhatsApp() {
        if (!state.session.date) return;
        const records = this.getRecordsFromTable();
        const calculated = this.getCalculatedState().summary;
        
        let detailLines = records.map(r => {
            return `*${r.tipo}:* ${Utils.formatCurrency(r.total)}${r.tercero ? ' - _' + r.tercero + '_' : ''}`;
        }).join('\n');

        const summary = `*Resumen de Caja - ${state.session.pos}*\n*Fecha:* ${state.session.date}\n\n*------ TOTALES ------*\n` +
            `*Total Ventas en Efectivo:* ${Utils.formatCurrency(calculated.ventasNetoEfectivo)}\n` +
            `*Total Ventas Electr√≥nicas:* ${Utils.formatCurrency(calculated.ventasElectronicas)}\n` +
            `*Total Ventas a Cr√©dito:* ${Utils.formatCurrency(calculated.ventasCredito)}\n` +
            `*Total Ventas:* ${Utils.formatCurrency(calculated.ventasGlobal)}\n` +
            `*Total Gastos en Efectivo:* ${Utils.formatCurrency(calculated.gastosEfectivo)}\n\n` +
            `*TOTAL DINERO A RECIBIR:* ${Utils.formatCurrency(calculated.esperadoTesoreria)}`;
        
        const finalMessage = `${summary}\n\n*------ DETALLE ------*\n${detailLines}`;
        window.open(`https://web.whatsapp.com/send?phone=${CONFIG.WHATSAPP_PHONE}&text=${encodeURIComponent(finalMessage)}`, '_blank');
      },

      handleClearAll() {
          if(confirm('¬øFinalizar el reporte? Se limpiar√°n todos los registros y la sesi√≥n.')) {
              localStorage.removeItem(this.getStorageKey());
              localStorage.removeItem(CONFIG.LS_SESSION_KEY);
              location.reload();
          }
      },
      
      updateNetworkStatus() {
          const online = navigator.onLine;
          UI.networkStatus.classList.toggle('status-online', online);
          UI.networkStatus.classList.toggle('status-offline', !online);
          UI.networkStatus.textContent = online ? 'Online' : 'Offline';
      },
      
      getStorageKey() {
        if (!state.session.date || !state.session.pos) return null;
        return `${CONFIG.LS_RECORDS_KEY}_${state.session.date}_${state.session.pos}`;
      },
      saveSession() { localStorage.setItem(CONFIG.LS_SESSION_KEY, JSON.stringify(state.session)); },
      loadSession() { state.session = JSON.parse(localStorage.getItem(CONFIG.LS_SESSION_KEY)) || { date: null, pos: null }; },
      saveRecords() {
        const key = this.getStorageKey();
        if (!key) return;
        const records = [];
        UI.recordsBody.querySelectorAll('tr[data-id]').forEach(tr => {
            records.push({
                id: tr.dataset.id,
                tipo: tr.cells[0].title,
                valor: tr.querySelector('[data-field="valor"]').value,
                devoluciones: tr.querySelector('[data-field="devoluciones"]').value,
                tercero: tr.querySelector('[data-field="tercero"]').value,
                detalle: tr.querySelector('[data-field="detalle"]').value,
                category: tr.dataset.category,
                styleHint: tr.dataset.styleHint,
                isRemovable: !!tr.querySelector('[data-action="delete"]'),
            });
        });
        localStorage.setItem(key, JSON.stringify(records));
      },
      loadRecords() {
        const key = this.getStorageKey();
        if (!key) return;
        const savedRecords = JSON.parse(localStorage.getItem(key)) || [];
        UI.recordsBody.innerHTML = '';
        if (savedRecords.length > 0) {
            savedRecords.forEach(rec => this.addRow(rec, true));
        } else {
            this.createInitialRows();
        }
      }
    };

    App.init();
  })();
  </script>
</body>
</html>
